# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the main branch
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: prepare
        run : |
          mkdir build_web
          echo "[preset.0]" >> export_presets.cfg
          echo "" >> export_presets.cfg
          echo "name=\"HTML5\"" >> export_presets.cfg
          echo "platform=\"HTML5\"" >> export_presets.cfg
          echo "runnable=true" >> export_presets.cfg
          echo "custom_features=\"\"" >> export_presets.cfg
          echo "export_filter=\"all_resources\"" >> export_presets.cfg
          echo "include_filter=\"\"" >> export_presets.cfg
          echo "exclude_filter=\"\"" >> export_presets.cfg
          echo "export_path=\"build_web/index.html\"" >> export_presets.cfg
          echo "patch_list=PoolStringArray(  )" >> export_presets.cfg
          echo "script_export_mode=1" >> export_presets.cfg
          echo "script_encryption_key=\"\"" >> export_presets.cfg
          echo "" >> export_presets.cfg
          echo "[preset.0.options]" >> export_presets.cfg
          echo "" >> export_presets.cfg
          echo "vram_texture_compression/for_desktop=true" >> export_presets.cfg
          echo "vram_texture_compression/for_mobile=false" >> export_presets.cfg
          echo "html/custom_html_shell=\"\"" >> export_presets.cfg
          echo "html/head_include=\"\"" >> export_presets.cfg
          echo "custom_template/release=\"\"" >> export_presets.cfg
          echo "custom_template/debug=\"\"" >> export_presets.cfg
      # Runs a single command using the runners shell
      - name: Godot Export
        # You may pin to the exact commit or the version.
        # uses: firebelley/godot-export@f97313d99598bd1b35eb28d0248bb28abd5fb9be
        uses: firebelley/godot-export@v2.6.0
        with:
          # The download url of the 64 bit Linux Headless Godot executable.
          godot_executable_download_url: https://downloads.tuxfamily.org/godotengine/3.2.3/Godot_v3.2.3-stable_linux_headless.64.zip
          # The url of the export templates corresponding to the Godot executable version.
          godot_export_templates_download_url: https://downloads.tuxfamily.org/godotengine/3.2.3/Godot_v3.2.3-stable_export_templates.tpz
          # The relative path containing the "project.godot" file.
          relative_project_path: ./
          # If exports should be archived.
          archive_export_output: false # optional
          # If exports that result in single files should be archived.
          archive_single_release_output: false # optional, default is true
          # The version which new releases start at.
          base_version: 0.0.1# optional, default is 0.0.1
          # If releases should be automatically created.
          create_release: false# optional, default is true
          # If release notes should be automatically generated based on commit history.
          generate_release_notes: false # optional
          # If set to true, exports will be moved to directory defined in "export_presets.cfg" relative to the root of the Git repository. Prioritized over "relative_export_path".
          use_preset_export_path: false# optional
          # If provided, exports will be moved to this directory relative to the root of the Git repository.
          #relative_export_path: # optional, default is 
          # If Windows executable icons should be updated with the preset's .ico file.
          update_windows_icons: false # optional
          # If should export with debugging tools.
          export_debug: false #optional

      - name: GitHub Push
  # You may pin to the exact commit or the version.
  # uses: ad-m/github-push-action@40bf560936a8022e68a3c00e7d2abefaf01305a6
        uses: ad-m/github-push-action@v0.6.0
        with:
          # Token for the repo. Can be passed in using $\{{ secrets.GITHUB_TOKEN }}
          github_token: $\{{ secrets.GITHUB_TOKEN }}
          # Repository name to push. Default or empty value represents current github repository (${GITHUB_REPOSITORY})
          #repository: # optional, default is 
          # Destination branch to push changes
          branch: pages # optional, default is master
          # Determines if force push is used
          #force: # optional
          # Determines if --tags is used
          #tags: # optional
          # Directory to change to before pushing.
          directory: build_web# optional, default is .
